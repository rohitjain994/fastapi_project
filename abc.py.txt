from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import Optional,List,Dict

app = FastAPI()


class Item(BaseModel):
    id: int
    name: str
    price: float

class ItemCreate(BaseModel):
    name: str
    price: float

class ItemUpdate(BaseModel):
    name: Optional[str] = None
    price: Optional[float] = None

items_db = {}
next_id = 1

@app.get("/")
def read_root():
    return {"message": "Demo FastAPI Project"}

@app.get("/items", response_model=List[Item])
def get_items():
    return list(items_db.values())

@app.post("/items", response_model=Item)
def create_item(item: ItemCreate):
    if next_id in items_db:
        raise HTTPException(status_code=400, detail="Item already exists")
    items_db[next_id] = item.model_dump()
    next_id += 1
    return items_db[next_id]['name']

@app.put("/items/{item_id}", response_model=Item)
def update_item(item_id: int, item: ItemUpdate):
    if item_id not in items_db:
        raise HTTPException(status_code=404, detail="Item not found")
    items_db[item_id] = item.model_dump()
    return items_db[item_id]['name']

@app.delete("/items/{item_id}")
def delete_item(item_id: int):
    if item_id not in items_db:
        raise HTTPException(status_code=404, detail="Item not found")
    del items_db[item_id]
    return {"message": f"Item '{items_db[item_id]['name']}' deleted"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)